( ######################################### )
( using the system interface SI for Atari   )
( ######################################### )

( JPS, 30mar93 )

GET-CURRENT hidden-wordlist SET-CURRENT


HEX

( fetch an absolut address )
: @abs ( addr -- aaddr )
        @ (abs) ;



( work with loader provided parameter field )

CREATE ""       BL C, BL C, BL C, BL C,


HEX

: (@)   ( addr -- value ) ( @ on unaligned addresses )
        COUNT ( 1000000 *) 18 LSHIFT SWAP
        COUNT ( 0010000 *) 10 LSHIFT SWAP
        COUNT ( 0000100 *)  8 LSHIFT SWAP
        COUNT SWAP DROP
        ( + + +) OR OR OR ;


: FINDSI ( 4str -- addr )
        COUNT DROP (@) >R
        forthparas 17 CELLS + @abs
        BEGIN DUP @ DUP R@  = ( 0=)
                SWAP "" @ = ( 0=  AND) OR 0=
        WHILE  2 CELLS +
        REPEAT
        R> DROP
        CELL+ @ DUP
        IF      (abs)
        ELSE    DROP  -1 ABORT" Cannot locate SI!"
        THEN ;




( a generic interface )

( a key defining word )
: systeminterface ( -- )
        CREATE
                HERE
                0 ,             ( for basepointer )
                BL WORD COUNT 1+ ALLOT DROP ( the ID )
( supposes, that WORD lays the string down at HERE! )
        DOES>
                DUP CELL+ FINDSI 
                SWAP ! ;

( example: )
( systeminterface initBIOS BIOS  CONSTANT BIOSBASE )
( initBIOS      ( BIOS should always be available )


( describing incoming parameters )
( ============================== )

( some 68k opcodes )
2D00 CONSTANT move.l_d0,-(a6)
2F1E CONSTANT move.l_(a6)+,-(a7)
DFFC CONSTANT adda.l_#n,a7
205E CONSTANT move.l_(a6)+,a0
4E90 CONSTANT jsr_(a0)


( some codegeneration words )

: [getresult] ( -- )
        move.l_d0,-(a6) codew, ;



: [getptrresult] ( -- )
        move.l_d0,-(a6) codew,
        POSTPONE (abs) ;



: [pushn] ( -- )
        move.l_(a6)+,-(a7) codew, ;



: [pushptr] ( -- )
        POSTPONE >abs   [pushn] ;



: [releasestack] ( n -- )
        adda.l_#n,a7 codew, code, ;



: [doSIcall] ( -- )
        move.l_(a6)+,a0 codew,
        jsr_(a0)                codew, ;





VARIABLE #incoming
0 #incoming !

: _n ( -- cfa )
        ['] [pushn]
        1 #incoming +! ;

: _a ( -- cfa )
        ['] [pushptr]
        1 #incoming +! ;



 ( strings )

CREATE STRBUF1  100 ALLOT
CREATE STRBUF2  100 ALLOT
CREATE STRBUF3  100 ALLOT
CREATE STRBUF4  100 ALLOT

: STR1>0 ( c-addr u -- 0str-addr )
        DUP >R STRBUF1 SWAP CMOVE
        0 R> STRBUF1 + C!
        STRBUF1 ;
: STR2>0 ( c-addr u-- 0str-addr )
        DUP >R STRBUF2 SWAP CMOVE
        0 R> STRBUF2 + C!
        STRBUF2 ;
: STR3>0 ( c-addr u -- 0str-addr )
        DUP >R STRBUF3 SWAP CMOVE
        0 R> STRBUF3 + C!
        STRBUF3 ;
: STR4>0 ( c-addr u -- 0str-addr )
        DUP >R STRBUF4 SWAP CMOVE
        0 R> STRBUF4 + C!
        STRBUF4 ;

: [pushstr1] ( -- )
        POSTPONE STR1>0
        [pushptr] ;
: [pushstr2] ( -- )
        POSTPONE STR2>0
        [pushptr] ;
: [pushstr3] ( -- )
        POSTPONE STR3>0
        [pushptr] ;
: [pushstr4] ( -- )
        POSTPONE STR4>0
        [pushptr] ;


: s1 ( -- cfa )
        ['] [pushstr1]
        1 #incoming +! ;
: s2 ( -- cfa )
        ['] [pushstr2]
        1 #incoming +! ;
: s3 ( -- cfa )
        ['] [pushstr3]
        1 #incoming +! ;
: s4 ( -- cfa )
        ['] [pushstr4]
        1 #incoming +! ;

: _s    ( -- cfa cfa )
        _a _n ;


( outcoming parameter )

: CSTR>COUNTED ( 0str-addr -- addr cnt )
	DUP
	IF
        (abs) DUP
        BEGIN DUP C@  WHILE     1+  REPEAT
        OVER - 
	ELSE
		0 
	THEN ;

( CSTR>COUNTED gives the Forth address and the count except )
( the 0str-addr is NULL. Then the result is ( 0 0 )


: outstr ( -- )
        [getresult]
        POSTPONE CSTR>COUNTED ;


: outint ( -- )
        [getresult] ;


: outptr ( -- )
        [getptrresult] ;


: nothing ( -- ) ;


( central defining word for SI functions )

: SI: ( base offset -- base offset+cell )
                :
                #incoming @ 0
                ?DO EXECUTE LOOP        ( generate code )
                2DUP
                POSTPONE LITERAL                ( offset )
                POSTPONE LITERAL                ( xxxBASE )
                POSTPONE @ POSTPONE +
                POSTPONE @
                [doSIcall]
                #incoming @ CELLS [releasestack]
                ' EXECUTE
                POSTPONE ;
                CELL+   0 #incoming !
        ;


SET-CURRENT ( restore )


( example: )
( BIOSBASE 0                                                                            )
(                                       SI: BIOSKEY             outint          )
(                                       SI: BIOSKEY?            outint          )
(                       n               SI: BIOSEMIT            nothing         )



