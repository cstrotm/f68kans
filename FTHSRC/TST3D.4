initCLIB
initFLOT
initPLOT
initPBGI


\
\ implementation dependend
\ 

: COORD! ( 16bit addr -- )		\ COORDINATE-STORE
	STATE @ 
	IF  POSTPONE w!  ELSE  w!  THEN 
	; IMMEDIATE

: COORD@ ( addr -- 16bit )		\ COORDINATE-FETCH
	STATE @ 
	IF  POSTPONE w@  ELSE  w@  THEN 
	; IMMEDIATE


: COORD+ 
	STATE @ 
	IF
		2 POSTPONE LITERAL
		POSTPONE + 
	ELSE  2 +  
	THEN 
	; IMMEDIATE

: COORDS
	STATE @ 
	IF	POSTPONE 2*  ELSE  2*  THEN 
	; IMMEDIATE

	 

: 2COORD+
	STATE @ 
	IF  POSTPONE CELL+  ELSE  CELL+  THEN 
	; IMMEDIATE




: CORNER+ 
	STATE @ 
	IF
		6 POSTPONE LITERAL
		POSTPONE + 
	ELSE  6 +  
	THEN 
	; IMMEDIATE

	 
: CORNERS
	STATE @ 
	IF
		POSTPONE DUP
		POSTPONE 2*
		POSTPONE + 
		POSTPONE 2*
	ELSE  DUP 2* + 2*   
	THEN 
	; IMMEDIATE



\
\ from here its standard
\


: CONNECTIONS
	STATE @ 
	IF
		POSTPONE 2*
		POSTPONE CELLS
	ELSE  2* CELLS   
	THEN 
	; IMMEDIATE



	
 : 3D>2D (  x y z -- x' y' )
	TUCK 512 SWAP */  >R  512 SWAP */  R>  
	;


\
\ Objects
\




\ 
\ an object is decribed by a list of corners and a list of
\ connections
\ additionally there is a point which is recognized as 
\ the center of the object, that is the point, which 
\ is invariant under rotation
\
\ the corner-list contains CORNERS, while the connections-
\ list contains integer indexes
\
DECIMAL

: OBJECT ( #corners #connections -- )
	CREATE 
	1 CORNERS ALLOT					\ for the center
	OVER , DUP  ,					\ remember counts
	HERE 0 , 						\ pointer to connection list
	ROT CORNERS ALLOT  
	HERE SWAP !						\ set pointer to connections
	2* CELLS ALLOT 
	;



: >CENTER ( object -- center )
	; IMMEDIATE

: >CORNERS ( object -- corners #corners )
	CORNER+ DUP 3 CELLS +  SWAP @ ;

: >CONNECTIONS ( object -- connections #connections )
	CORNER+ CELL+ DUP CELL+ @  SWAP @ ;


: CONNECTION! ( c1 c2 index object-connections -- )
	SWAP CONNECTIONS +  TUCK
	CELL+ ! ! 
	;

: CONNECTION@ ( index object-connections -- c1 c2 )
	SWAP CONNECTIONS +  
	DUP			@
	SWAP CELL+ 	@
	;


: CORNER! ( x y z index pxyz -- )
	SWAP CORNERS +  
	TUCK 2COORD+ 		COORD! 	
	TUCK COORD+  		COORD! 	
						COORD!
	;


: CORNER@ ( index pxyz -- x y z )
	SWAP CORNERS +  
	DUP					COORD@
	SWAP DUP COORD+		COORD@ 	
	SWAP 2COORD+ 		COORD@
	;



: CORNERS>2D ( corners #corners addr -- )
	LOCALS| BUF | 
	0 
	DO
		I OVER CORNER@
		3D>2D 
		I BUF CONNECTION!	
	LOOP
	DROP
	;




\
\ .2D-CONNECTIONS is implementation dependent,
\ because it relies in DRAW-LINE
\

: .2D-CONNECTIONS ( connections #connections 2d-corners -- )
	LOCALS| CORS |
	0 
	DO
		I OVER CONNECTION@ >R
		CORS CONNECTION@ 
		R> CORS CONNECTION@
		DRAW-LINE
	LOOP
	DROP
	;

CREATE CORNERBUF  64 CONNECTIONS ALLOT

: .OBJECT ( object -- )
	DUP >CORNERS  CORNERBUF  CORNERS>2D
	>CONNECTIONS CORNERBUF .2D-CONNECTIONS
	;


\
\ manipulations on objects
\



\
\ TEST
\

: INIT-CUBE ( size x0 y0 z0 cube -- )
	LOCALS| CUBE Z0 Y0 X0 SIZE | ( locals ) 
	SIZE 2/ TO SIZE
	
	X0 Y0 Z0 0 CUBE >CENTER CORNER!  

	CUBE >CORNERS 8 <> ABORT" NOT A CUBE!"	( object-corners )
	>R	
	X0 SIZE - 	Y0 SIZE -	Z0 SIZE -	0 R@ CORNER!
	X0 SIZE -	Y0 SIZE -	Z0 SIZE +	1 R@ CORNER!
	X0 SIZE -	Y0 SIZE + 	Z0 SIZE -	2 R@ CORNER!
	X0 SIZE + 	Y0 SIZE - 	Z0 SIZE - 	3 R@ CORNER!
	X0 SIZE -	Y0 SIZE +	Z0 SIZE +	4 R@ CORNER!
	X0 SIZE +	Y0 SIZE +	Z0 SIZE -	5 R@ CORNER!
	X0 SIZE +	Y0 SIZE -	Z0 SIZE +	6 R@ CORNER!
	X0 SIZE +	Y0 SIZE +	Z0 SIZE +	7 R> CORNER!
	CUBE >CONNECTIONS 12 <> ABORT" NOT A CUBE!" ( object-connections )
	>R
	0 1		 0 R@ CONNECTION!			
	0 2		 1 R@ CONNECTION!			
	0 3		 2 R@ CONNECTION!			
	1 4		 3 R@ CONNECTION!			
	1 6		 4 R@ CONNECTION!			
	2 4		 5 R@ CONNECTION!			
	2 5		 6 R@ CONNECTION!			
	3 5	 	 7 R@ CONNECTION!			
	3 6		 8 R@ CONNECTION!			
	4 7		 9 R@ CONNECTION!			
	5 7		10 R@ CONNECTION!			
	6 7		11 R> CONNECTION!			
	;



8 12 OBJECT CB
2000 3000 3000 3000 CB INIT-CUBE

: TEST   
	100 0   
	DO   
		20 15 15 11 I + CB INIT-CUBE  
		CLEAR-GRAPHICS  
		CB .OBJECT  
		UPDATE-GRAPHICS  
	LOOP   
;  
