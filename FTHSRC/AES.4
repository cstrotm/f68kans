( Anpassung an F68KANS 1.0			23.08.93 )
( Zbigniew Diaczyszyn )
(  email: Z.Diaczyszyn@sontap.franken.de )

( Hilfsdefinitionen                          5.08.93				)
( ----------------------------------------------------------------- )

HEX

: off   ( adr -- ) 0 SWAP ! ;
: on    ( adr -- ) -1 SWAP ! ;
: under      DUP -rot ;
header: w>l  201648C0 code, 2C804E75 code, reveal
header: b>l  20164880 code, 48C02C80 code, 4E75 codew, reveal
: 2+ ( n -- n+2 ) 2 + ;
: 2-              2 - ;

( ---------------------------------------------------------------- )

DECIMAL

 CREATE control     HERE 5   2* DUP ALLOT ERASE
 CREATE global      HERE 15  2* DUP ALLOT ERASE
 CREATE int_in      HERE 16  2* DUP ALLOT ERASE
 CREATE int_out     HERE 7   2* DUP ALLOT ERASE
 CREATE addr_in     HERE 3   CELLS DUP ALLOT ERASE
 CREATE addr_out    HERE 1   CELLS DUP ALLOT ERASE

CREATE aes_pb        ( wird bei AES-Trap in d1 uebergeben )
    control >abs , global >abs ,  int_in >abs ,
    int_out >abs , addr_in >abs , addr_out >abs ,

VARIABLE  (void                  (void off


: >control ( data-adr -- )
        control 8 CMOVE         ( -- )
        control 6 + w@ w>l      ( -- n )
        DUP 0<                  ( -- n flag )
     IF INVERT control 6 + w! (void on ELSE DROP  THEN ;


: >addr_in ( -- )
        control 6 + w@          ( -- n )
        ?DUP 0<> IF             ( -- /n-1)
        CELLS  addr_in under +   ( -- low hi )
        ?DO >abs I CELL- ! -4 +LOOP THEN ;

: >int_in ( -- )
        control 2+ w@           ( -- #int_in )
        ?DUP 0<> IF             ( -- #int_in-1 )
        2* int_in under +
        ?DO I 2- w! -2 +LOOP THEN ;


header: (gemaes)				( aes_pb -- )
		HEX 221E303C code, 00C84E42 code, 4E75 codew, reveal DECIMAL

\ 		move.l  (a6)+,d1 )
( 		move.w  #$c8,d0 )
(  		trap    #2 )
(		rts )

( int_out[0] ist immer TOS! )

: int_out>                       ( ( -- int_out[1] .... int_out[i] )
        control  CELL+  w@  1-   ( da Start bei int_out[1], Ausgabe- )
        ?DUP                     ( parameter um 1 verringern )
     IF int_out 2+ under         ( -- adr i adr) ( int_out[1]  ! )
        OVER  + +  SWAP          ( -- adr+i+i adr )
        ?DO I w@ 2 +LOOP         ( -- n1 ... ni )
   THEN  (void @ INVERT          ( void-flag true not ? )
        IF int_out w@ THEN       \ int_out(0) on Top Of Stack )
        (void off ;

: void ( -- n )  name number? DROP INVERT  ;


: gem: 	CREATE  w, w, w, w,      		( Opcode,intin,intout,addrin )
        DOES>
        >control >addr_in  >int_in 		( Eingabefelder fuellen )
        aes_pb >abs (gemaes)
        int_out> ;

\ ---------------------------------------------------------
\                      AESCALLS
\ ---------------------------------------------------------
\            based on a library from R. Saric
\ ---------------------------------------------------------


       0 1 0  10 gem: appl_init       ( -- ap_id )
  void 1 1 2  11 gem: appl_read       ( rid len buf -- )
  void 1 1 2  12 gem: appl_write      ( wid len buf -- )
       1 1 0  13 gem: appl_find       ( name -- id )
  void 1 1 2  14 gem: appl_tplay      ( num scale buf -- )
  void 1 1 1  15 gem: appl_trecord    ( num buf -- )
\ void 0 1 2  16 gem: appl_bvset      ( disk hard -- )
\ void 0 1 0  17 gem: appl_yield      ( -- )
  void 0 1 0  19 gem: appl_exit       ( -- )

       0 1 0  20 gem: evnt_keybd      ( -- key )
       0 5 3  21 gem: evnt_button     ( clicks mask state -- x y button kbstate clicks )
  void 0 5 5  22 gem: evnt_mouse      ( flag x y w h -- x y button kbstate )
  void 1 1 0  23 gem: evnt_messag     ( buf -- )
  void 0 1 2  24 gem: evnt_timer      ( lo hi -- )
       1 7 16 25 gem: evnt_multi      ( flags clicks mask state f1 x y w h f2 x y w h lo hi buf -- )
                                      ( x y button kbstate key clicks flags )
       0 1 2  26 gem: evnt_dclick     ( new getset -- old )

  void 1 1 1  30 gem: menu_bar        ( flag tree -- )
  void 1 1 2  31 gem: menu_icheck     ( item check tree -- )
  void 1 1 2  32 gem: menu_ienable    ( item enable tree -- )
  void 1 1 2  33 gem: menu_tnormal    ( item normal tree -- )
  void 2 1 1  34 gem: menu_text       ( item tree text -- )
       1 1 1  35 gem: menu_register   ( ap_id text -- menu_id )
\ void 0 1 1  36 gem: menu_unregister ( menu_id -- )
\      0 1 2  37 gem: menu_click      ( val setit -- val )

  void 1 1 2  40 gem: objc_add        ( parent child tree -- )
  void 1 1 1  41 gem: objc_delete     ( object tree -- )
  void 1 1 6  42 gem: objc_draw       ( start max x y w h tree -- )
       1 1 4  43 gem: objc_find       ( start max x y tree -- index )
  void 1 3 1  44 gem: objc_offset     ( object tree -- x y )
  void 1 1 2  45 gem: objc_order      ( object pos tree -- )
  void 1 2 4  46 gem: objc_edit       ( object char idx kind tree -- idx )
  void 1 1 8  47 gem: objc_change     ( object 0 x y w h state redraw tree -- )

       1 1 1  50 gem: form_do         ( startob tree -- )
  void 0 1 9  51 gem: form_dial       ( flag xl yl wl hl xb yb wb hb -- )
       1 1 1  52 gem: form_alert      ( button string -- button )
       0 1 1  53 gem: form_error      ( error# -- button )
  void 1 5 0  54 gem: form_center     ( tree -- x y w h )
       1 3 3  55 gem: form_keybd      ( ob char obnext -- flag nxtob char )
       1 2 2  56 gem: form_button     ( ob clicks -- flag nxtob )

  void 0 3 4  70 gem: graf_rubberbox  ( x y mw mh -- lw lh )
  void 0 3 8  71 gem: graf_dragbox    ( w h x y bx by bw bh -- fx fy )
  void 0 1 6  72 gem: graf_movebox    ( w h sx sy dx dy -- )
  void 0 1 8  73 gem: graf_growbox    ( sxywh fxywh -- )
  void 0 1 8  74 gem: graf_shrinkbox  ( fxywh sxywh -- )
       1 1 4  75 gem: graf_watchbox   ( object instate outstate tree -- flag )
       1 1 3  76 gem: graf_slidebox   ( parent object vflag tree -- pos )
       0 5 0  77 gem: graf_handle     ( -- cw ch cbw cbh handle )
  void 1 1 1  78 gem: graf_mouse      ( number addr -- )
  void 0 5 0  79 gem: graf_mkstate    ( -- x y button kbstate )

  void 1 1 0  80 gem: scrp_read       ( len buf -- )
  void 1 1 0  81 gem: scrp_write      ( len buf -- )
\ void 0 1 0  82 gem: scrp_clear      ( -- )

  void 2 2 0  90 gem: fsel_input      ( inpath insel -- button )
  void 3 2 0  91 gem: fsel_exinput    ( inpath insel text -- button )

       0 1 5 100 gem: wind_create     ( kind x y w h -- handle )
  void 0 1 5 101 gem: wind_open       ( handle x y w h -- )
  void 0 1 1 102 gem: wind_close      ( handle -- )
  void 0 1 1 103 gem: wind_delete     ( handle -- )
  void 0 5 2 104 gem: wind_get        ( handle kind -- w1..w4 )
  void 0 1 6 105 gem: wind_set        ( handle kind w1..w4 -- )
       0 1 2 106 gem: wind_find       ( x y -- handle )
  void 0 1 1 107 gem: wind_update     ( flag -- )
  void 0 5 6 108 gem: wind_calc       ( flag kind x y w h -- x y w h )
  void 0 1 0 109 gem: wind_new        ( -- ) \ ab TOS 1.4

       1 1 0 110 gem: rsrc_load       ( string -- loaded )
  void 0 1 0 111 gem: rsrc_free       ( -- )
  void 0 1 2 112 gem: aes.112

: rsrc_gaddr ( type index -- addr )
  aes.112 addr_out @ ;

  void 1 1 2 113 gem: rsrc_saddr      ( type index addr -- )
  void 1 1 1 114 gem: rsrc_obfix      ( object tree -- )

  void 2 1 0 120 gem: shel_read       ( cline cpath -- )
  void 2 1 3 121 gem: shel_write      ( doex isgr isgem path line -- )
  void 1 1 1 122 gem: shel_get        ( len addr -- )
  void 1 1 1 123 gem: shel_put        ( len addr -- )
       1 1 0 124 gem: shel_find       ( buf -- flag )
  void 2 1 0 125 gem: shel_envrn      ( value parm -- )
\ void 2 1 0 126 gem: shel_rdef       ( fname dir -- )
\ void 2 1 0 127 gem: shel_wdef       ( fname dir -- )

\ void 0 6 6 130 gem: xgrf_stepcalc   ( cwh rec -- cxy cnt xys )
\ void 0 1 9 131 gem: xgrf_2box       ( cnt xys c? d rec -- )



